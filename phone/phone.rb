# Autogenerated from a Treetop grammar. Edits may be lost.


module Phone
  include Treetop::Runtime

  def root
    @root ||= :phonenumber
  end

  module Phonenumber0
    def get_digits n

      a = [n.get_digit] if n.respond_to? :get_digit
      unless n.terminal?
        a += n.elements.collect {|e| get_digits e}
      end
      a
    end

    def get_phone
      get_digits(self).join
    end

    def get_formatted_phone
      pn = get_phone
      "(#{pn[0..2]}) #{pn[3..5]}-#{pn[6..-1]}"
    end

    def get_digit
      ''
    end
  end

  def _nt_phonenumber
    start_index = index
    if node_cache[:phonenumber].has_key?(index)
      cached = node_cache[:phonenumber][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_digit
      if r2
        r1 = r2
      else
        r3 = _nt_punctuation
        if r3
          r1 = r3
        else
          r4 = _nt_tens
          if r4
            r1 = r4
          else
            r5 = _nt_teens
            if r5
              r1 = r5
            else
              r6 = _nt_ntext
              if r6
                r1 = r6
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Phonenumber0)
    end

    node_cache[:phonenumber][start_index] = r0

    r0
  end

  module Digit0
    def get_digit
      self.text_value
    end
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      r0.extend(Digit0)
      @index += 1
    else
      r0 = nil
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  module Punctuation0
    def get_digit
      ''
    end
  end

  def _nt_punctuation
    start_index = index
    if node_cache[:punctuation].has_key?(index)
      cached = node_cache[:punctuation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\.,\\-,\\(,\\) _]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      r0.extend(Punctuation0)
      @index += 1
    else
      r0 = nil
    end

    node_cache[:punctuation][start_index] = r0

    r0
  end

  module Ntext0
    def get_digit
          case self.text_value
          when 'one' then '1'
          when 'two' then '2'
          when 'three' then '3'
          when 'four' then  '4'
          when 'five' then  '5'
          when 'six' then  '6'
          when 'seven' then  '7'
          when 'eight' then  '8'
          when 'nine' then  '9'
          when 'zero' then  '0'
          else "(#{self.text_value})"
      end
    end
  end

  def _nt_ntext
    start_index = index
    if node_cache[:ntext].has_key?(index)
      cached = node_cache[:ntext][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('one', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('one')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Ntext0)
    else
      if has_terminal?('two', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('two')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Ntext0)
      else
        if has_terminal?('three', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('three')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Ntext0)
        else
          if has_terminal?('four', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('four')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Ntext0)
          else
            if has_terminal?('five', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('five')
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Ntext0)
            else
              if has_terminal?('six', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('six')
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(Ntext0)
              else
                if has_terminal?('seven', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure('seven')
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(Ntext0)
                else
                  if has_terminal?('eight', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 5))
                    @index += 5
                  else
                    terminal_parse_failure('eight')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                    r0.extend(Ntext0)
                  else
                    if has_terminal?('nine', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 4))
                      @index += 4
                    else
                      terminal_parse_failure('nine')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                      r0.extend(Ntext0)
                    else
                      if has_terminal?('zero', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 4))
                        @index += 4
                      else
                        terminal_parse_failure('zero')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                        r0.extend(Ntext0)
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:ntext][start_index] = r0

    r0
  end

  module Teens0
    def ntext
      elements[0]
    end

  end

  module Teens1
    def get_digit
      '1'
    end
  end

  def _nt_teens
    start_index = index
    if node_cache[:teens].has_key?(index)
      cached = node_cache[:teens][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_ntext
    s0 << r1
    if r1
      if has_terminal?('teen', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('teen')
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Teens0)
      r0.extend(Teens1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:teens][start_index] = r0

    r0
  end

  module Tens0
    def get_digit
      case self.text_value
          when 'thirty' then 3
          when 'forty'  then 4
          when 'fifty'  then 5
          when 'sixty'  then 6
          when 'seventy' then 7
          when 'eighty'  then 8
          when 'ninety'  then 9
          else "(#{self.text_value})"
      end
    end
  end

  def _nt_tens
    start_index = index
    if node_cache[:tens].has_key?(index)
      cached = node_cache[:tens][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('twenty', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('twenty')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Tens0)
    else
      if has_terminal?('thirty', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure('thirty')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Tens0)
      else
        if has_terminal?('forty', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('forty')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Tens0)
        else
          if has_terminal?('fifty', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure('fifty')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Tens0)
          else
            if has_terminal?('sixty', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
              @index += 5
            else
              terminal_parse_failure('sixty')
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Tens0)
            else
              if has_terminal?('seventy', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 7))
                @index += 7
              else
                terminal_parse_failure('seventy')
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(Tens0)
              else
                if has_terminal?('eighty', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
                  @index += 6
                else
                  terminal_parse_failure('eighty')
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(Tens0)
                else
                  if has_terminal?('ninety', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 6))
                    @index += 6
                  else
                    terminal_parse_failure('ninety')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                    r0.extend(Tens0)
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:tens][start_index] = r0

    r0
  end

end

class PhoneParser < Treetop::Runtime::CompiledParser
  include Phone
end
