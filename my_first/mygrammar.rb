# Autogenerated from a Treetop grammar. Edits may be lost.


module MyGrammar
  include Treetop::Runtime

  def root
    @root ||= :map
  end

  module Map0
    def whitespace1
      elements[0]
    end

    def folder
      elements[1]
    end

    def whitespace2
      elements[2]
    end
  end

  module Map1
    def getFolder
      return elements[2].text_value
    end
  end

  def _nt_map
    start_index = index
    if node_cache[:map].has_key?(index)
      cached = node_cache[:map][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_whitespace
    s0 << r1
    if r1
      r2 = _nt_folder
      s0 << r2
      if r2
        r3 = _nt_whitespace
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Map0)
      r0.extend(Map1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:map][start_index] = r0

    r0
  end

  module Folder0
  end

  def _nt_folder
    start_index = index
    if node_cache[:folder].has_key?(index)
      cached = node_cache[:folder][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('Folder', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('Folder')
      r1 = nil
    end
    s0 << r1
    if r1
      r3 = _nt_colon
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          i7 = index
          r8 = _nt_path_without_quotes
          if r8
            r7 = r8
          else
            r9 = _nt_drive_path_without_quotes
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Folder0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:folder][start_index] = r0

    r0
  end

  def _nt_alpha_digit_special
    start_index = index
    if node_cache[:alpha_digit_special].has_key?(index)
      cached = node_cache[:alpha_digit_special][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9.+&\\\\]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alpha_digit_special][start_index] = r0

    r0
  end

  module PathWithoutQuotes0
  end

  def _nt_path_without_quotes
    start_index = index
    if node_cache[:path_without_quotes].has_key?(index)
      cached = node_cache[:path_without_quotes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      if has_terminal?('\G[\\\\]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_alpha_digit_special
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(PathWithoutQuotes0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:path_without_quotes][start_index] = r0

    r0
  end

  module DrivePathWithoutQuotes0
    def path_without_quotes
      elements[2]
    end
  end

  def _nt_drive_path_without_quotes
    start_index = index
    if node_cache[:drive_path_without_quotes].has_key?(index)
      cached = node_cache[:drive_path_without_quotes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_colon
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 1
          break
        end
      end
      if s2.size < 1
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_path_without_quotes
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DrivePathWithoutQuotes0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:drive_path_without_quotes][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(' ', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(' ')
      r0 = nil
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[ \\t\\n\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:whitespace][start_index] = r0

    r0
  end

  def _nt_colon
    start_index = index
    if node_cache[:colon].has_key?(index)
      cached = node_cache[:colon][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(':', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r0 = nil
    end

    node_cache[:colon][start_index] = r0

    r0
  end

end

class MyGrammarParser < Treetop::Runtime::CompiledParser
  include MyGrammar
end
